{"ast":null,"code":"var _jsxFileName = \"C:\\\\game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoryMatch = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matches, setMatches] = useState(0);\n  const alert = useAlert();\n\n  // Initialize the deck of cards\n  const initCards = () => {\n    const numbers = [1, 2, 3, 4];\n    const cards = [];\n    numbers.forEach(number => {\n      cards.push({\n        number,\n        flipped: false\n      });\n      cards.push({\n        number,\n        flipped: false\n      });\n    });\n    shuffleArray(cards);\n    setCards(cards);\n  };\n\n  // Shuffle the cards\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  // Handle when a card is clicked\n  const handleCardClick = index => {\n    const newCards = [...cards];\n    newCards[index].flipped = true;\n    setFlippedCards([...flippedCards, index]);\n    setCards(newCards);\n\n    // Check for a match\n    if (flippedCards.length === 1) {\n      if (cards[flippedCards[0]].number === cards[index].number) {\n        setMatches(matches + 1);\n        setFlippedCards([]);\n      } else {\n        setTimeout(() => {\n          newCards[flippedCards[0]].flipped = false;\n          newCards[index].flipped = false;\n          setFlippedCards([]);\n          setCards(newCards);\n        }, 500);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initCards,\n      style: {\n        marginTop: '40px',\n        padding: '20px'\n      },\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '100%',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        onClick: () => handleCardClick(index),\n        style: {\n          width: '50px',\n          height: '50px',\n          margin: '30px',\n          padding: '40px',\n          textAlign: 'center',\n          background: card.flipped ? 'white' : 'black',\n          color: card.flipped ? 'black' : 'white',\n          display: 'inline-block',\n          textAlign: 'center'\n        },\n        children: card.flipped ? card.number : ''\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryMatch, \"T+dxbbO3lrOuw6i3sMrJrg12kNM=\", true);\n_c = MemoryMatch;\nexport default MemoryMatch;\nvar _c;\n$RefreshReg$(_c, \"MemoryMatch\");","map":{"version":3,"names":["React","useState","MemoryMatch","cards","setCards","flippedCards","setFlippedCards","matches","setMatches","alert","useAlert","initCards","numbers","forEach","number","push","flipped","shuffleArray","array","i","length","j","Math","floor","random","handleCardClick","index","newCards","setTimeout","marginTop","padding","maxWidth","marginLeft","marginRight","map","card","width","height","margin","textAlign","background","color","display"],"sources":["C:/game/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\n\nconst MemoryMatch = () => {\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matches, setMatches] = useState(0);\n  const  alert = useAlert();\n\n  // Initialize the deck of cards\n  const initCards = () => {\n    const numbers = [1, 2, 3, 4];\n    const cards = [];\n    numbers.forEach((number) => {\n      cards.push({ number, flipped: false });\n      cards.push({ number, flipped: false });\n    });\n    shuffleArray(cards);\n    setCards(cards);\n  }\n\n  // Shuffle the cards\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  // Handle when a card is clicked\n  const handleCardClick = (index) => {\n    const newCards = [...cards];\n    newCards[index].flipped = true;\n    setFlippedCards([...flippedCards, index]);\n    setCards(newCards);\n\n    // Check for a match\n    if (flippedCards.length === 1) {\n      if (cards[flippedCards[0]].number === cards[index].number) {\n        setMatches(matches + 1);\n        setFlippedCards([]);\n      } else {\n        setTimeout(() => {\n          newCards[flippedCards[0]].flipped = false;\n          newCards[index].flipped = false;\n          setFlippedCards([]);\n          setCards(newCards);\n        }, 500);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <button onClick={initCards}\n      style={{ \n        marginTop: '40px',\n        padding: '20px'\n      }} >Start Game</button>\n      <div style={{\n        maxWidth: '100%',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      }} \n      >\n        {cards.map((card, index) => (\n          <div className='container'\n            key={index}\n            onClick={() => handleCardClick(index)}\n            style={{\n              width: '50px',\n              height: '50px',\n              margin: '30px',\n              padding: '40px',\n              textAlign: 'center',\n              background: card.flipped ? 'white' : 'black',\n              color: card.flipped ? 'black' : 'white',\n              display: 'inline-block',\n              textAlign: 'center',\n            }}\n          >\n            {card.flipped ? card.number : ''}\n          </div>\n        ))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default MemoryMatch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}