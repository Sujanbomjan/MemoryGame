{"ast":null,"code":"var _jsxFileName = \"C:\\\\game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoryMatch = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matches, setMatches] = useState(0);\n\n  // Initialize the deck of cards\n  const initCards = () => {\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8];\n    const cards = [];\n    numbers.forEach(number => {\n      cards.push({\n        number,\n        flipped: false\n      });\n      cards.push({\n        number,\n        flipped: false\n      });\n    });\n    shuffleArray(cards);\n    setCards(cards);\n  };\n\n  // Shuffle the cards\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  // Handle when a card is clicked\n  const handleCardClick = index => {\n    const newCards = [...cards];\n    newCards[index].flipped = true;\n    setFlippedCards([...flippedCards, index]);\n    setCards(newCards);\n\n    // Check for a match\n    if (flippedCards.length === 1) {\n      if (cards[flippedCards[0]].number === cards[index].number) {\n        setMatches(matches + 1);\n        setFlippedCards([]);\n      } else {\n        setTimeout(() => {\n          newCards[flippedCards[0]].flipped = false;\n          newCards[index].flipped = false;\n          setFlippedCards([]);\n          setCards(newCards);\n        }, 1000);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initCards,\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleCardClick(index),\n        style: {\n          width: '50px',\n          height: '50px',\n          background: card.flipped ? 'white' : 'black',\n          color: card.flipped ? 'black' : 'white',\n          display: 'inline-block',\n          textAlign: 'center'\n        },\n        children: card.flipped ? card.number : ''\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Matches: \", matches]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryMatch, \"NdDWLYpQzruaILX87Pf9McnoeMw=\");\n_c = MemoryMatch;\nexport default MemoryMatch;\nvar _c;\n$RefreshReg$(_c, \"MemoryMatch\");","map":{"version":3,"names":["React","useState","MemoryMatch","cards","setCards","flippedCards","setFlippedCards","matches","setMatches","initCards","numbers","forEach","number","push","flipped","shuffleArray","array","i","length","j","Math","floor","random","handleCardClick","index","newCards","setTimeout","map","card","width","height","background","color","display","textAlign"],"sources":["C:/game/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\n\nconst MemoryMatch = () => {\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matches, setMatches] = useState(0);\n\n  // Initialize the deck of cards\n  const initCards = () => {\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8];\n    const cards = [];\n    numbers.forEach((number) => {\n      cards.push({ number, flipped: false });\n      cards.push({ number, flipped: false });\n    });\n    shuffleArray(cards);\n    setCards(cards);\n  }\n\n  // Shuffle the cards\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  // Handle when a card is clicked\n  const handleCardClick = (index) => {\n    const newCards = [...cards];\n    newCards[index].flipped = true;\n    setFlippedCards([...flippedCards, index]);\n    setCards(newCards);\n\n    // Check for a match\n    if (flippedCards.length === 1) {\n      if (cards[flippedCards[0]].number === cards[index].number) {\n        setMatches(matches + 1);\n        setFlippedCards([]);\n      } else {\n        setTimeout(() => {\n          newCards[flippedCards[0]].flipped = false;\n          newCards[index].flipped = false;\n          setFlippedCards([]);\n          setCards(newCards);\n        }, 1000);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <button onClick={initCards}>Start Game</button>\n      <div>\n        {cards.map((card, index) => (\n          <div\n            key={index}\n            onClick={() => handleCardClick(index)}\n            style={{\n              width: '50px',\n              height: '50px',\n              background: card.flipped ? 'white' : 'black',\n              color: card.flipped ? 'black' : 'white',\n              display: 'inline-block',\n              textAlign: 'center',\n            }}\n          >\n            {card.flipped ? card.number : ''}\n          </div>\n        ))}\n      </div>\n      <div>Matches: {matches}</div>\n    </div>\n  );\n}\n\nexport default MemoryMatch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}